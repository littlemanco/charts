---
# README
#
# Todo: This is just design at the moment. I don't quite know how it'll all get executed.
#
# This initialises vault, connects it to ETCD and sets up a PKI backend to issue certificates.
# The certificates are then stored in Kubernetes secrets, this vault instance destroyed and other
# vault instances spun up to connect used on the SSL certificates generated by this job initially.
#
# Notes:
#  - The Kubernetes certificates can probably be generated by the kubectl sidecar
#  - The script might be able to be execited in a sidecar also, leaving the vault
#    server as the official hashicorp container
apiVersion: "extensions/v1beta1"
kind: "Job"
metadata:
  labels:
    application: "vault"
    role: "bootstrap"
  name: "bootstrap"
  namespace: {{ default "default" .Values.namespace | quote }}
spec:
  template:
    metadata:
      labels:
        application: "vault"
        role: "bootstrap"
    spec:
      volumes:
      - name: "vault-config"
        configMap:
          name: "vault-config"
      containers:
      - name: "vault"
        env:
        image: {{ default "vault:0.6.2" .Values.vaultContainer | quote }}
        imagePullPolicy: "IfNotPresent"
        # Vault cannot determine what address it should use to advertise when running in H/A. We use the pod IP as the
        # advertise address; so long as the discovery mechanism of the service is OK, we should be able to
        # horizontally scale vault.
        #
        # https://www.vaultproject.io/docs/concepts/ha.htmldirect-access
        # https://github.com/kubernetes/kubernetes/issues/1331#issuecomment-56194881
        cmd:
          - "sh"
          - "-c"
          # HTTP is used as SSL is not set up for this node yet.
          - |
              VAULT_REDIRECT_ADDR="http://$(hostname -I):8200" \
              VAULT_CLUSTER_ADDR="http://$(hostame -I):8200" \
              env && /docker-entrypoint.sh
        args:
          - "server"
          - "--config"
          - "/vault/config"
        resources:
          limits:
            cpu: "100m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "512Mi"
        securityContext:
          privileged: false
          capabilities:
            add:
              - IPC_LOCK
        ports:
        - containerPort: 8200
          protocol: "TCP"
          name: "http"
        volumeMounts:
        - name: "vault-config"
          readOnly: true
          mountPath: "/vault/config"
        livenessProbe:
          tcpSocket:
            port: 8200
          initialDelaySeconds: 5
          timeoutSeconds: 1
        readinessProbe:
          tcpSocket:
            port: "http"
          initialDelaySeconds: 5
          timeoutSeconds: 1
      restartPolicy: "Never"
      securityContext: {}
