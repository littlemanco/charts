---
# README
#
# Todo: This is just design at the moment. I don't quite know how it'll all get executed.
#
# This initialises vault, connects it to ETCD and sets up a PKI backend to issue certificates. 
# The certificates are then stored in Kubernetes secrets, this vault instance destroyed and other
# vault instances spun up to connect used on the SSL certificates generated by this job initially.
#
# Notes:
#  - The Kubernetes certificates can probably be generated by the kubectl sidecar
#  - The script might be able to be execited in a sidecar also, leaving the vault
#    server as the official hashicorp container
apiVersion: "extensions/v1beta1"
kind: "Job"
metadata:
  labels:
    application: "vault"
    role: "secret-management"
  name: "secret-management"
  namespace: {{ default "default" .Values.namespace }}
spec:
  template:
    metadata:
      labels:
        application: "vault"
        role: "secret-management"
    spec:
      # volumes:
      # - name: "secret-management-etc-conf-d"
      # configMap:
      #   name: "secret-management-etc-conf-d"
      # - name: "secret-management-data"
      #   hostPath:
      #     path: /data/secret-management/
      containers:
      - name: "vault"
        # env:
        # - name: "FOO"
        #   value: "BAR"
        image: "vault:0.6.2" # Todo: Update this
        imagePullPolicy: "IfNotPresent"
        # args:
        #   - "command"
        #   - "line"
        #   - "arguments"
        resources:
          limits:
            cpu: "100m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "512Mi"
        securityContext:
          privileged: false
          capabilities:
            add:
              - IPC_LOCK
        ports:
        - containerPort: 8200
          protocol: "TCP"
          name: "http"
        # volumeMounts:
        # - name: "secret-management-etc-conf-d"
        #   readOnly: true
        #   mountPath: "/etc/secret-management/conf.d"
        # - name: "secret-management-data
        #   readOnly: false
        #   mountPath: "/data"
        livenessProbe:
          tcpSocket:
            port: 8200
          initialDelaySeconds: 5
          timeoutSeconds: 1
        readinessProbe:
          tcpSocket:
            port: http
          initialDelaySeconds: 5
          timeoutSeconds: 1
      restartPolicy: "Never"
      securityContext: {}
