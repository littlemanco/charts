---
# Heavily inspired by https://github.com/BuoyantIO/linkerd-examples/blob/master/k8s-ingress/ingress-controller.yml
# Built based on the sitewards/helm-chart starter
apiVersion: "extensions/v1beta1"
kind: "Deployment"
metadata:
  labels:
    app: {{ template "linkerd-ingress.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
  name: {{ template "linkerd-ingress.fullname" . }}
spec:
  replicas: {{ default 2 .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "linkerd-ingress.fullname" . }}
      release: "{{ .Release.Name }}"
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: "RollingUpdate"
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "{{ .Values.monitoring.pod.scrape }}"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        ## Rototate the deployment with every configuration change 
        checksum/config: {{ include (print $.Chart.Name "/templates/configmap.yaml") . | sha256sum }}
      labels:
        app: {{ template "linkerd-ingress.fullname" . }}
        release: "{{ .Release.Name }}"
    spec:
      containers:
        - name: {{ template "linkerd-ingress.name" }}
          ## Environment variables can be populated in a number of ways, including secrets, or just string values. Below
          ## are some examples for you to copy-paste. Remember to uncomment the `env` node!
          #
          # env:
          #
          ## An example of a simple key value pair
          #
          # - name: "FOO"
          #   value: "BAR"
          #
          ## An example of environment variables from a secret
          #
          # - name: "SECRET"
          #   valueFrom:
          #     secretKeyRef:
          #       name: __SECRET_NAME__
          #       key: __KEY_USED_IN_SECRET_NAME__
          #
          image: {{ .Values.image | quote }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          ports:
            - containerPort: 80
              protocol: "TCP"
              name: "http"
            - containerPort: 443
              protocol: "TCP"
              name: "https"
            - containerPort: 9090
              protocol: "TCP"
              name: "admin"
          # volumeMounts:
          #  - name: "webserver-etc-conf-d"
          #    readOnly: true
          #    mountPath: "/etc/webserver/conf.d"
          livenessProbe:
            httpGet:
              # Todo: Adjust this to the Prometheus metrics path.
              path: "/metrics"
              port: "admin"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              # Todo: Adjust this to the Prometheus metrics path.
              path: "/metrics"
              port: "admin"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
      restartPolicy: "Always"
